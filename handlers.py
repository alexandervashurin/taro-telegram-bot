import logging
import random
from datetime import datetime  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, MessageHandler, filters
from opisanie_kart import CARD
from utils import check_subscription, is_admin, send_main_menu
from database import write_user_to_db
from asyncio import Lock

data_lock = Lock()
stats = {
    'total_users': 0,
    'active_users': set(),
    'total_readings': 0,
    'subscriptions': 0
}

async def handle_start(update: Update, context: CallbackContext):
    user = update.effective_user
    async with data_lock:
        stats['total_users'] += 1
        stats['active_users'].add(user.id)

    await send_main_menu(update, context, user.id)

async def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    text = update.message.text

    if not await check_subscription(user.id, context.bot):
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            reply_markup=ReplyKeyboardMarkup(
                [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"]],
                resize_keyboard=True
            )
        )
        return

    if text == "üé¥ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É":
        async with data_lock:
            stats['total_readings'] += 1

        card_name, card_info = random.choice(list(CARD.items()))
        with open(card_info["image"], 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=f"üîÆ {card_name}\n\n{card_info['description']}",
                reply_markup=ReplyKeyboardMarkup(
                    [["üé¥ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥"]],
                    resize_keyboard=True
                )
            )
    elif text == "üé¥ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥":
        await send_main_menu(update, context, user.id)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)

async def show_stats(update: Update, context: CallbackContext):
    user = update.effective_user
    if not await is_admin(user.id, context.bot):
        await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    async with data_lock:
        last_active = datetime.now(tz).strftime("%d.%m.%Y %H:%M")
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(stats['active_users'])}\n"
            f"–í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {stats['total_readings']}\n"
            f"–ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['subscriptions']}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}"
        )

    await update.message.reply_text(stats_text)

async def handle_subscription_update(update: Update, context: CallbackContext):
    user = update.effective_user
    subscribed = await check_subscription(user.id, context.bot)

    async with data_lock:
        if subscribed and user.id not in stats['active_users']:
            stats['subscriptions'] += 1
            stats['active_users'].add(user.id)
            write_user_to_db(user.id, user.username)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏ –≤—Ä–µ–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    if subscribed:
        await send_main_menu(update, context, user.id)

def setup_handlers(app):
    app.add_handler(CommandHandler("start", handle_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.ALL, handle_subscription_update), group=1)

