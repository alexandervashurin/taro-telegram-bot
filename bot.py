import logging
import random
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
from opisanie_kart import CARD
from dotenv import load_dotenv
import os
from datetime import datetime
import pytz
from asyncio import Lock

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

API_TOKEN = os.getenv("API_TOKEN")          # —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É BotFather
CHANNEL_ID = os.getenv("CHANNEL_ID")        # –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ—Ç –±–æ—Ç https://t.me/getmyid_bot
CHANNEL = os.getenv("CHANNEL")              # –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_URL = os.getenv("CHANNEL_URL")      # –∞–¥—Ä–µ—Å –∫–∞–Ω–∞–ª–∞
SUBSCRIBERS_FILE = "subscribers.txt"       # —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}
stats = {
    'total_users': 0,
    'active_users': set(),
    'total_readings': 0,
    'subscriptions': 0
}
data_lock = Lock()
tz = pytz.timezone('Asia/Yekaterinburg')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª
def write_subscriber_id(user_id: int):
    current_time = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    with open(SUBSCRIBERS_FILE, 'a') as file:
        file.write(f"{user_id}, {current_time}\n")

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª
async def check_subscription(user_id: int, bot: Bot):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"Subscription check error: {e}")
        return False

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞
async def is_admin(user_id: int, bot: Bot):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['administrator', 'creator']
    except Exception as e:
        logging.error(f"Admin check error: {e}")
        return False

async def send_main_menu(update: Update, context: CallbackContext, user_id: int):
    is_admin_user = await is_admin(user_id, context.bot)
    subscribed = await check_subscription(user_id, context.bot)

    if subscribed:
        text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üôè\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        buttons = [["üé¥ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É"]]
        if is_admin_user:
            buttons.append(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    else:
        text = f"üîÆ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_URL}"
        buttons = [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"]]

    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    await update.message.reply_text(text, reply_markup=keyboard)

async def handle_start(update: Update, context: CallbackContext):
    user = update.effective_user
    async with data_lock:
        stats['total_users'] += 1
        stats['active_users'].add(user.id)

    await send_main_menu(update, context, user.id)

async def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    text = update.message.text

    if not await check_subscription(user.id, context.bot):
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            reply_markup=ReplyKeyboardMarkup(
                [["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"]],
                resize_keyboard=True
            )
        )
        return

    if text == "üé¥ –í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É":
        async with data_lock:
            stats['total_readings'] += 1

        card_name, card_info = random.choice(list(CARD.items()))
        with open(card_info["image"], 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=f"üîÆ {card_name}\n\n{card_info['description']}",
                reply_markup=ReplyKeyboardMarkup(
                    [["üé¥ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥"]],
                    resize_keyboard=True
                )
            )
    elif text == "üé¥ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥":
        await send_main_menu(update, context, user.id)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)

async def show_stats(update: Update, context: CallbackContext):
    user = update.effective_user
    if not await is_admin(user.id, context.bot):
        await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    async with data_lock:
        last_active = datetime.now(tz).strftime("%d.%m.%Y %H:%M")
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(stats['active_users'])}\n"
            f"–í—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {stats['total_readings']}\n"
            f"–ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['subscriptions']}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}"
        )

    await update.message.reply_text(stats_text)

async def handle_subscription_update(update: Update, context: CallbackContext):
    user = update.effective_user
    subscribed = await check_subscription(user.id, context.bot)

    async with data_lock:
        if subscribed and user.id not in stats['active_users']:
            stats['subscriptions'] += 1
            stats['active_users'].add(user.id)
            write_subscriber_id(user.id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–∞–π–ª

    if subscribed:
        await send_main_menu(update, context, user.id)

def main():
    app = ApplicationBuilder().token(API_TOKEN).build()

    app.add_handler(CommandHandler("start", handle_start))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_message
    ))

    app.add_handler(MessageHandler(
        filters.ALL,
        handle_subscription_update
    ), group=1)

    app.run_polling()

if __name__ == '__main__':
    main()
